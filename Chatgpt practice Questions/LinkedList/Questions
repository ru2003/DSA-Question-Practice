✅ Phase 1: Basic Understanding & Traversals

1. Create a linked list and print all elements.

2. Insert a node at the beginning.

Insert a node at the end.

Insert a node at a given position.

Delete the first node of a linked list.

Delete the last node of a linked list.

Delete a node at a given position.

Find the length of the linked list (iterative & recursive).

Search an element in the linked list.

Reverse a linked list (iterative & recursive).

✅ Phase 2: Intermediate Applications
Find the middle of the linked list.
(Use slow and fast pointer approach)

Detect a loop in a linked list.
(Floyd’s Cycle Detection Algorithm)

Remove a loop in a linked list.

Check if the linked list is a palindrome.

Merge two sorted linked lists.

Find the N-th node from the end of the list.

Remove duplicates from a sorted linked list.

Remove duplicates from an unsorted linked list.

Intersection point of two linked lists.

Segregate even and odd nodes in a linked list.

✅ Phase 3: Advanced Problems
Clone a linked list with next and random pointer.

Sort a linked list using Merge Sort.

Add two numbers represented by linked lists.

Flatten a multilevel linked list.

Rearrange the linked list in zig-zag fashion.

Reverse nodes in k-group.

Rotate the linked list by K nodes.

Swap nodes in pairs.

Check if two linked lists are identical.

Segregate 0s, 1s, and 2s in a linked list (like Dutch flag algo).


































































































Reverse a linked list.

Detect a cycle in a linked list.

Find the middle of a linked list.

Merge two sorted linked lists.

Remove nth node from the end.

Find intersection point of two lists.

Check if a linked list is a palindrome.

Add two numbers represented by linked lists.

Delete a node with only access to that node.

Flatten a multilevel linked list.

Clone a linked list with random pointers.

Rotate a linked list.

Remove duplicates from sorted list.

Convert binary number in linked list to integer.

Swap nodes in pairs.

Reorder linked list in a specific pattern.

Merge K sorted linked lists.

Split linked list into k parts.

Partition list around a value.

Sort a linked list.

